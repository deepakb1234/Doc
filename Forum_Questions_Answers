1) Initializing a multi-dimentional array to all zeros

module tb;
  //logic arr[3][4]; //array  ='{'{'hx, 'hx, 'hx, 'hx}, '{'hx, 'hx, 'hx, 'hx}, '{'hx, 'hx, 'hx, 'hx}} 
         //  V C S   S i m u l a t i o n   R e p o r t 
  logic arr[3][4] = '{default:0};
  
  initial
    begin
  	 $display("array  =%p",arr);
    end
  
endmodule


array  ='{'{'h0, 'h0, 'h0, 'h0}, '{'h0, 'h0, 'h0, 'h0}, '{'h0, 'h0, 'h0, 'h0}} 
           V C S   S i m u l a t i o n   R e p o r t 


2) Is there an alternative to sum() Constraint

class Sum_Alt ;
 
        int N ; // Size of Unpacked Arrays !!
 
	int M ; // Sum() of elements !!
 
   rand bit [3:0] A[] ;  // Need an  alternative to A.sum() !!     
 
   rand bit [9:0] A_helper[$] ; // Helper Array !!
 
   constraint SIZE  { A.size() == A_helper.size() ;  A.size() == N ; }
 
   constraint SUM_ALT { 
 
                            foreach(A_helper[i])
			   {
                         //     if ( i == 1 )  // When ( i != 0 )
                       //      {
                 //               A_helper[i] == A[i] + A[i-1] ;
			   //  }
                                 if ( i > 0 ) 
                             {
                                A_helper[i] == A[i] + A_helper[i-1] ;
			     }
			     else
                             {
                                A_helper[i] == A[i] ;
			     }
                           }
                       }
 
     constraint  SUMM  {  A_helper[ A_helper.size() - 1 ]  == M ; }   
 
  endclass
 module tb;
  Sum_Alt  obj ;
 
  initial  begin
 
     obj = new() ;
     obj.N = 4 ; 
     obj.M = 15 ; 
 
    if ( obj.randomize() )
     begin
       $display("Success with %p",obj);
     end
   else
     $display("Fails"); 
 
  end
   
 endmodule
 
 Success with '{N:4, M:15, A:'{'h1, 'h7, 'h1, 'h6} , A_helper:'{'h1, 'h8, 'h9, 'hf} }
           V C S   S i m u l a t i o n   R e p o r t 
